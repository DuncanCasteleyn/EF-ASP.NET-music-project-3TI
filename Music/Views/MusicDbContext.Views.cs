//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Music.MusicContext.MusicDbContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets0417a3639d23ff81347a07a22d4ae6d9ea82baea5c441b6795e1277bc89ecf27))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets0417a3639d23ff81347a07a22d4ae6d9ea82baea5c441b6795e1277bc89ecf27 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "0417a3639d23ff81347a07a22d4ae6d9ea82baea5c441b6795e1277bc89ecf27"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Album")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.AlbumTrack")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Track")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.Artist")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.Genre")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.PlaylistTrack")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.Playlist")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.ArtistTrack")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.GenreTrack")
            {
                return GetView8();
            }

            if (extentName == "MusicDbContext.Albums")
            {
                return GetView9();
            }

            if (extentName == "MusicDbContext.AlbumTracks")
            {
                return GetView10();
            }

            if (extentName == "MusicDbContext.Tracks")
            {
                return GetView11();
            }

            if (extentName == "MusicDbContext.Artists")
            {
                return GetView12();
            }

            if (extentName == "MusicDbContext.Genres")
            {
                return GetView13();
            }

            if (extentName == "MusicDbContext.PlaylistTracks")
            {
                return GetView14();
            }

            if (extentName == "MusicDbContext.Playlists")
            {
                return GetView15();
            }

            if (extentName == "MusicDbContext.Artist_Tracks")
            {
                return GetView16();
            }

            if (extentName == "MusicDbContext.Genre_Tracks")
            {
                return GetView17();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Album.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Album
        [CodeFirstDatabaseSchema.Album](T1.Album_Id, T1.Album_Name, T1.Album_Release)
    FROM (
        SELECT 
            T.Id AS Album_Id, 
            T.Name AS Album_Name, 
            T.Release AS Album_Release, 
            True AS _from0
        FROM MusicDbContext.Albums AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AlbumTrack.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AlbumTrack
        [CodeFirstDatabaseSchema.AlbumTrack](T1.AlbumTrack_TrackId, T1.AlbumTrack_AlbumId, T1.AlbumTrack_TrackNumber)
    FROM (
        SELECT 
            T.TrackId AS AlbumTrack_TrackId, 
            T.AlbumId AS AlbumTrack_AlbumId, 
            T.TrackNumber AS AlbumTrack_TrackNumber, 
            True AS _from0
        FROM MusicDbContext.AlbumTracks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Track.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Track
        [CodeFirstDatabaseSchema.Track](T1.Track_Id, T1.Track_Name, T1.Track_Length, T1.Track_Release, T1.Track_NumberOfPlay, T1.Track_TrackLocation)
    FROM (
        SELECT 
            T.Id AS Track_Id, 
            T.Name AS Track_Name, 
            T.Length AS Track_Length, 
            T.Release AS Track_Release, 
            T.NumberOfPlay AS Track_NumberOfPlay, 
            T.TrackLocation AS Track_TrackLocation, 
            True AS _from0
        FROM MusicDbContext.Tracks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Artist.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Artist
        [CodeFirstDatabaseSchema.Artist](T1.Artist_Id, T1.Artist_Name, T1.Artist_RealName, T1.Artist_Gender, T1.Artist_BirthCountry)
    FROM (
        SELECT 
            T.Id AS Artist_Id, 
            T.Name AS Artist_Name, 
            T.RealName AS Artist_RealName, 
            CAST(T.Gender AS [Edm.Int32]) AS Artist_Gender, 
            T.BirthCountry AS Artist_BirthCountry, 
            True AS _from0
        FROM MusicDbContext.Artists AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Genre.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Genre
        [CodeFirstDatabaseSchema.Genre](T1.Genre_Id, T1.Genre_Name)
    FROM (
        SELECT 
            T.Id AS Genre_Id, 
            T.Name AS Genre_Name, 
            True AS _from0
        FROM MusicDbContext.Genres AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PlaylistTrack.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PlaylistTrack
        [CodeFirstDatabaseSchema.PlaylistTrack](T1.PlaylistTrack_TrackId, T1.PlaylistTrack_PlaylistId, T1.PlaylistTrack_TrackNumber)
    FROM (
        SELECT 
            T.TrackId AS PlaylistTrack_TrackId, 
            T.PlaylistId AS PlaylistTrack_PlaylistId, 
            T.TrackNumber AS PlaylistTrack_TrackNumber, 
            True AS _from0
        FROM MusicDbContext.PlaylistTracks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Playlist.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Playlist
        [CodeFirstDatabaseSchema.Playlist](T1.Playlist_Id, T1.Playlist_Name)
    FROM (
        SELECT 
            T.Id AS Playlist_Id, 
            T.Name AS Playlist_Name, 
            True AS _from0
        FROM MusicDbContext.Playlists AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ArtistTrack.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ArtistTrack
        [CodeFirstDatabaseSchema.ArtistTrack](T1.[ArtistTrack.Artist_Id], T1.[ArtistTrack.Track_Id])
    FROM (
        SELECT 
            Key(T.Artist_Tracks_Source).Id AS [ArtistTrack.Artist_Id], 
            Key(T.Artist_Tracks_Target).Id AS [ArtistTrack.Track_Id], 
            True AS _from0
        FROM MusicDbContext.Artist_Tracks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.GenreTrack.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing GenreTrack
        [CodeFirstDatabaseSchema.GenreTrack](T1.[GenreTrack.Genre_Id], T1.[GenreTrack.Track_Id])
    FROM (
        SELECT 
            Key(T.Genre_Tracks_Source).Id AS [GenreTrack.Genre_Id], 
            Key(T.Genre_Tracks_Target).Id AS [GenreTrack.Track_Id], 
            True AS _from0
        FROM MusicDbContext.Genre_Tracks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MusicDbContext.Albums.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Albums
        [Music.MusicContext.Album](T1.Album_Id, T1.Album_Name, T1.Album_Release)
    FROM (
        SELECT 
            T.Id AS Album_Id, 
            T.Name AS Album_Name, 
            T.Release AS Album_Release, 
            True AS _from0
        FROM CodeFirstDatabase.Album AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MusicDbContext.AlbumTracks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AlbumTracks
        [Music.MusicContext.AlbumTrack](T1.AlbumTrack_TrackId, T1.AlbumTrack_AlbumId, T1.AlbumTrack_TrackNumber)
    FROM (
        SELECT 
            T.TrackId AS AlbumTrack_TrackId, 
            T.AlbumId AS AlbumTrack_AlbumId, 
            T.TrackNumber AS AlbumTrack_TrackNumber, 
            True AS _from0
        FROM CodeFirstDatabase.AlbumTrack AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MusicDbContext.Tracks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Tracks
        [Music.MusicContext.Track](T1.Track_Id, T1.Track_Name, T1.Track_Length, T1.Track_Release, T1.Track_NumberOfPlay, T1.Track_TrackLocation)
    FROM (
        SELECT 
            T.Id AS Track_Id, 
            T.Name AS Track_Name, 
            T.Length AS Track_Length, 
            T.Release AS Track_Release, 
            T.NumberOfPlay AS Track_NumberOfPlay, 
            T.TrackLocation AS Track_TrackLocation, 
            True AS _from0
        FROM CodeFirstDatabase.Track AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MusicDbContext.Artists.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Artists
        [Music.MusicContext.Artist](T1.Artist_Id, T1.Artist_Name, T1.Artist_RealName, T1.Artist_Gender, T1.Artist_BirthCountry)
    FROM (
        SELECT 
            T.Id AS Artist_Id, 
            T.Name AS Artist_Name, 
            T.RealName AS Artist_RealName, 
            CAST(T.Gender AS [Music.MusicContext.Gender]) AS Artist_Gender, 
            T.BirthCountry AS Artist_BirthCountry, 
            True AS _from0
        FROM CodeFirstDatabase.Artist AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MusicDbContext.Genres.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Genres
        [Music.MusicContext.Genre](T1.Genre_Id, T1.Genre_Name)
    FROM (
        SELECT 
            T.Id AS Genre_Id, 
            T.Name AS Genre_Name, 
            True AS _from0
        FROM CodeFirstDatabase.Genre AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MusicDbContext.PlaylistTracks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PlaylistTracks
        [Music.MusicContext.PlaylistTrack](T1.PlaylistTrack_TrackId, T1.PlaylistTrack_PlaylistId, T1.PlaylistTrack_TrackNumber)
    FROM (
        SELECT 
            T.TrackId AS PlaylistTrack_TrackId, 
            T.PlaylistId AS PlaylistTrack_PlaylistId, 
            T.TrackNumber AS PlaylistTrack_TrackNumber, 
            True AS _from0
        FROM CodeFirstDatabase.PlaylistTrack AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MusicDbContext.Playlists.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Playlists
        [Music.MusicContext.Playlist](T1.Playlist_Id, T1.Playlist_Name)
    FROM (
        SELECT 
            T.Id AS Playlist_Id, 
            T.Name AS Playlist_Name, 
            True AS _from0
        FROM CodeFirstDatabase.Playlist AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MusicDbContext.Artist_Tracks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Artist_Tracks
        [Music.MusicContext.Artist_Tracks](T3.[Artist_Tracks.Artist_Tracks_Source], T3.[Artist_Tracks.Artist_Tracks_Target])
    FROM (
        SELECT -- Constructing Artist_Tracks_Source
            CreateRef(MusicDbContext.Artists, row(T2.[Artist_Tracks.Artist_Tracks_Source.Id]), [Music.MusicContext.Artist]) AS [Artist_Tracks.Artist_Tracks_Source], 
            T2.[Artist_Tracks.Artist_Tracks_Target]
        FROM (
            SELECT -- Constructing Artist_Tracks_Target
                T1.[Artist_Tracks.Artist_Tracks_Source.Id], 
                CreateRef(MusicDbContext.Tracks, row(T1.[Artist_Tracks.Artist_Tracks_Target.Id]), [Music.MusicContext.Track]) AS [Artist_Tracks.Artist_Tracks_Target]
            FROM (
                SELECT 
                    T.Artist_Id AS [Artist_Tracks.Artist_Tracks_Source.Id], 
                    T.Track_Id AS [Artist_Tracks.Artist_Tracks_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.ArtistTrack AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for MusicDbContext.Genre_Tracks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Genre_Tracks
        [Music.MusicContext.Genre_Tracks](T3.[Genre_Tracks.Genre_Tracks_Source], T3.[Genre_Tracks.Genre_Tracks_Target])
    FROM (
        SELECT -- Constructing Genre_Tracks_Source
            CreateRef(MusicDbContext.Genres, row(T2.[Genre_Tracks.Genre_Tracks_Source.Id]), [Music.MusicContext.Genre]) AS [Genre_Tracks.Genre_Tracks_Source], 
            T2.[Genre_Tracks.Genre_Tracks_Target]
        FROM (
            SELECT -- Constructing Genre_Tracks_Target
                T1.[Genre_Tracks.Genre_Tracks_Source.Id], 
                CreateRef(MusicDbContext.Tracks, row(T1.[Genre_Tracks.Genre_Tracks_Target.Id]), [Music.MusicContext.Track]) AS [Genre_Tracks.Genre_Tracks_Target]
            FROM (
                SELECT 
                    T.Genre_Id AS [Genre_Tracks.Genre_Tracks_Source.Id], 
                    T.Track_Id AS [Genre_Tracks.Genre_Tracks_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.GenreTrack AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
